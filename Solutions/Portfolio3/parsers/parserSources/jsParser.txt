start =
	js

js =
	js:(pws:blankSpace node:(array / object / function / declaration / call / comment) ews:blankSpace {return pws+node+ews;})*
    	{return js.join("");}

function =
	f:"function" ws* v:varName? ws* "(" p:parameters? ")" ws* obr:"{" innerJS:(js / blankSpace)? cbr:"}"
    	{return f + (v != null ? " " + v : "") + "(" + (p != null ? p : "") + ") " + obr + (innerJS != null ? innerJS : "") + cbr;}
object =
	"{ key: value }"
array =
	"[val, val, val]"
declaration =
	"varType varName = (object / function / declaration / call);"
call =
	"varName.functionName(params);"

comment =
	"/*" txt:(!"*/" txt:. {return txt})* "*/"
    	{return "<span class='js-comment'>/*"+txt.join("")+"*/</span>" ;}
    / "//" txt:(!nl txt:. {return txt})* nl:nl?
    	{return "<span class='js-comment'>//"+txt.join("")+"</span>" +(nl != null ? nl : "") ;}

varName =
	first:[a-zA-Z$_] rest:alphaNumWord*
    	{return first + rest.join("");}
parameters =
	ws* first:parameter ws* rest:("," ws* param:parameter ws* {return param;})*
    	{rest.unshift(first); return rest;}
parameter =
	varName / string / number
string =
	("\"" cont:(!"\"" .)* "\"") {return "\""+cont.join("")+"\"";}
    / ("'" cont:(!"'" .)* "'") {return "'"+cont.join("")+"'";}
number =
	start:[0-9]+ rest:("." nums:[0-9]+ {return nums.join("");})?
    	{return start + (rest != null ? dec : "");}

alphaNumWord =
	alpha:[a-zA-Z0-9\-_]+ {return alpha.join("");}

ws = ws:[ \t]+ { return ws.join("");}
nl = nl:("\n" / "\n\r") {return nl;}

blankSpace =
	bs:(ws:ws {return ws;}/ nl:nl {return nl;})* {return bs.join("")}